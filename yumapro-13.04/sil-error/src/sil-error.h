
#ifndef _H_sil_error
#define _H_sil_error
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-pro v12.09-60-g44c6af9

    Combined SIL header
    module sil-error
    revision 2012-11-24
    namespace http://www.netconfcentral.org/ns/sil-error

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_sil_error_M_sil_error (const xmlChar *)"sil-error"
#define y_sil_error_R_sil_error (const xmlChar *)"2012-11-24"

#define y_sil_error_N_dummy (const xmlChar *)"dummy"
#define y_sil_error_N_id (const xmlChar *)"id"
#define y_sil_error_N_real (const xmlChar *)"real"
#define y_sil_error_N_sil_error_choice (const xmlChar *)"sil-error-choice"
#define y_sil_error_N_sil_error_con (const xmlChar *)"sil-error-con"
#define y_sil_error_N_sil_error_con2 (const xmlChar *)"sil-error-con2"
#define y_sil_error_N_sil_error_list (const xmlChar *)"sil-error-list"
#define y_sil_error_N_sil_phase (const xmlChar *)"sil-phase"
#define y_sil_error_N_sil_trigger (const xmlChar *)"sil-trigger"

/* container /sil-error-con */
typedef struct y_sil_error_T_sil_error_con_ {
    xmlChar *sil_phase;
    uint32 sil_trigger;
} y_sil_error_T_sil_error_con;

/* list /sil-error-list */
typedef struct y_sil_error_T_sil_error_list_ {
    dlq_hdr_t qhdr;
    xmlChar *id;
    xmlChar *sil_phase;
    uint32 sil_trigger;
} y_sil_error_T_sil_error_list;

/* case /sil-error-con2/sil-error-choice/dummy */
typedef struct y_sil_error_T_sil_error_con2_sil_error_choice_dummy_ {
    int8 dummy;
} y_sil_error_T_sil_error_con2_sil_error_choice_dummy;

/* case /sil-error-con2/sil-error-choice/real */
typedef struct y_sil_error_T_sil_error_con2_sil_error_choice_real_ {
    xmlChar *sil_phase;
    uint32 sil_trigger;
} y_sil_error_T_sil_error_con2_sil_error_choice_real;

/* choice /sil-error-con2/sil-error-choice */
typedef union y_sil_error_T_sil_error_con2_sil_error_choice_ {
    y_sil_error_T_sil_error_con2_sil_error_choice_dummy dummy;
    y_sil_error_T_sil_error_con2_sil_error_choice_real real;
} y_sil_error_T_sil_error_con2_sil_error_choice;

/* container /sil-error-con2 */
typedef struct y_sil_error_T_sil_error_con2_ {
    y_sil_error_T_sil_error_con2_sil_error_choice sil_error_choice;
} y_sil_error_T_sil_error_con2;
/********************************************************************
* FUNCTION y_sil_error_init
* 
* initialize the sil-error server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_sil_error_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_sil_error_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_sil_error_init2 (void);

/********************************************************************
* FUNCTION y_sil_error_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_sil_error_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif