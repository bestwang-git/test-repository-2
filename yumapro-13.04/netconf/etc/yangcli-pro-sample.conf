#
# yangcli-pro configuration file
# Refer to yangcli-pro container definition in yangcli-pro.yang
# for full CLI documentation.
#
# version 13.04
#

yangcli-pro {

#### leaf aliases-file
# Specifies the yangcli command aliases file to use.
#
# aliases-file ~/.yuma/.yangcli_aliases
#
#### leaf alt-names
#  Match mode to use for alternamte names in UrlPath name searches.
#
# alt-names true
#
#### leaf autoalaises
#  Controls whether the yangcli command aliases will
#  be saved at exit and loaded at startup.
#  If true, the 'aliases-file' parameter will be used if it is set,
#  or else the default aliases file will be used
#  (~/.yuma/.yangcli_aliases), for loading
#  and saving the yangcli command aliases.
#  If false, the yangcli command aliases will only be stored
#  and loaded manually with the aliases command.
#
# autoaliases true
#
#### leaf autocomp
#   Controls whether partial keywords will be 
#   checked for interactive or script commands.
#
# autocomp true
#
#### leaf autoconfig
# Controls whether the running configuration
# will be retrieved automatically for active sessions.
# By default, the running config will be retrieved
# and maintained so it can be compared and used for
# command tab completion.
#
# autoconfig true
#
####  leaf autohistory
#   Controls whether the command line history buffer will
#   be saved at exit and loaded at startup.
#   If true, the default history file will be used
#       (~/.yumapro/.yangcli_history) for loading
#       and saving the history buffer.
#       If false, the history buffer will only be stored
#       and loaded manually with the history command.
#
# autohistory true
#
#### leaf autoload
#  Controls whether any modules (except this one)
#  will be automatically loaded upon startup or
#  upon session startup with an server. If false,
#  the 'load-module' command must be used to
#  explicitly load all the desired definition modules.
#
# autoload true
#
#### leaf autonotif
#  Controls whether notifications will automatically
#  be enabled when a session starts.
#  By default, notifications will be enabled if the
#  server supports the :notifications and :interleave
#  capabilities. A <create-subscription> operation will
#  be performed and notification events for the sesion
#  will be monitored.
#
# autonotif true
#
#### leaf autosessions
#  Controls whether the saved sessions will be loaded
#  into memory at startup and saved to file at exit.
#  If true, the default session-cfg file will be used
#  (~/.yumapro/.yangcli_pro_sessions.conf) for loading
#  and saving the configured sessions in memory.
#  If false, the configured sessions will only be stored
#  and loaded manually with the sessions-cfg command.
#
# autosessions true
#
#### leaf autotest
#  Controls whether the saved test suites will be loaded
#  into memory at startup and saved to file at exit.
#  If true, the default test-suite-cfg file will be used
#  (~/.yumapro/.yangcli_pro_tests.conf) for loading
#  and saving the configured test-suites in memory.
#  If false, the configured test-suites will only be stored
#  and loaded manually with the test-suite command.
#
# autotest true
#
#### leaf autouservars
#  Controls whether the yangcli user variables will
#  be saved at exit and loaded at startup.
#  If true, the 'uservars-file' parameter will be used if set,
#  or else the default user variables file will be used
#  (~/.yumapro/yangcli_uservars.xml), for loading
#  and saving the yangcli user variables.
#  If false, the yangcli user variables will only be stored
#  and loaded manually with the uservars command.
#
# autouservars true
#
#### leaf bad-data
#  Specifies how invalid user input from the CLI
#  will be handled when filling PDUs for remote
#  operations.
#     ignore
#     warn
#     check
#     error
#
# bad-data check
#
#### leaf batch-mode [empty]
#  If present, the interactive CLI will not be used.
#  A script should be provided with the 'run-script'
#  parameter, or a command provided with the 'run-command'
#  parameter, or else the program will simply exit.
#
# default is interactive-mode, not batch-mode
#
#### leaf config-edit-mode
#  Controls how edits are applied during config mode.
#   line: Automatically apply a config mode edit after each line
#   level:Automatically apply a config mode edit when the current
#       level is exited.
#    manual: Only apply a config mode edit manually with the
#      'apply' command.
#
# config-edit-mode level
#
#### leaf datapath
#  Internal file search path for data files.
#  e.g., datapath "~/work:/some/path:../another/path"
#
# no default for datapath
#
#### leaf default-module
#  Selects the default module to try after the core operations,
#  when searching for a command or parameter match
#
# no default for default-module
#
#### leaf-list deviation
#  Specifies a YANG module to use as a source of deviations
#  e.g. deviation project-X-deviations
#
# no default for deviation
#
#### leaf display-mode
#  Controls how values are displayed during output
#  to STDOUT or a log file.
#
#     plain: Plain identifier without any prefix format.
#     prefix: Plain text with XML prefix added format.
#     module: Plain text with module name as prefix added format.
#     xml: XML format
#     xml-nons: XML format without namespaces
#     json: JSON format
#
# display-mode plain
#
#### leaf echo-notif-loglevel
#  Specifies the log-level value that must be active before
#  notifications will be echoed to the log or STDOUT.
#  This parameter has no affect if 'echo-notifs' is false.
#  The $$echo-notif-loglevel system variable is derived from
#  this parameter.
#
# echo-notif-loglevel debug
#
#### leaf echo-notifs
#   Allow notifications to be echoed to the log or STDOUT
#      
#      If 'true', <notification> messages will be output
#       to the log, if log-level is set to the value
#       specified by the echo-notif-loglevel or higher.
#      
#      If 'false', <notifications> messages will not be
#      output to the log.
#     
#      The $$echo-notifs system variable is derived from
#      this parameter.
#
# echo-notifs true
#
#### leaf echo-replies
#  Allow RPC replies to be echoes to the log or STDOUT
#
# echo-replies true
#
#### leaf-list feature-disable module-name:feature-name
# Identifies a feature which should be considered disabled.
# Zero or more entries are allowed.
#
# no default for feature-disable (e.g., feature-disable foo:feature1)
#
#### leaf-list feature-enable module-name:feature-name
# Identifies a feature which should be considered enabled.
# Zero or more entries are allowed.
#
# no default for feature-enable (e.g., feature-enable foo:feature1)
#
#### leaf feature-enable-default
# If true (the default), then features will be  enabled  by  default.
# If false, then features will be disabled by default.
#
# feature-enable-default true
#
#### leaf fixorder
#  Controls whether PDU parameters will be
#  automatically sent to the server in the
#  canonical order.
#
# fixorder true
#
#### leaf force-target
# Controls whether the candidate or running
# configuration datastore will be used as
# the default edit target, when both are supported
# by the server.
#
# force-target candidate
#
#### leaf home
# Directory specification for the home directory to use 
# instead of HOME.
#
# there is no default for home ($HOME env var used) 
# (e.g. home /home/someuser)
#
#### leaf indent
#  Number of spaces to indent (0 to 9) when formatting
#  nested output.
#
# indent 2
#
#### leaf log
#  Filespec for the log file to use instead of STDOUT.
#  Leave out to use STDOUT for log messages
#
# no default for log
#
#### leaf log-append
#  If present, the log will be appended not over-written.
#  If not, the log will be over-written.
#  Only meaningful if the 'log' parameter is also present.
#
# default is to overwrite (flag not present)
#
#### leaf log-backtrace
#
# If present, log output will include traceback
# detail for each log message, subject to further
# filtering by --log-backtrace-level and/or
# log-backtrace-stream qualifiers
# uint32 [range 0 .. 100]
#
# log-backtrace 0
#
#### leaf log-backtrace-detail
#
# If present in conjunction with --log-backtrace
# log messages will include 'detailed' backtrace
# information (if supported by the compiler).
#
# log-backtrace-detail
#
#### leaf log-backtrace-level
#
# Indicates for which debug level(s) backtrace
# info will be generated. Param string is an XSD
# list: a double quoted series of whitespace
# separated (level) strings like "error warn debug"
#
#         bit write: Include backtrace info in write messages.
#         bit dev0: Include backtrace info in developer
#             level 0 messages.
#         bit error: Include backtrace info in error messages
#         bit warn: Include backtrace info in warning messages
#         bit info: Include backtrace info in info messages
#         bit dev1: Include backtrace info in developer
#             level 1 messages
#         bit debug: Include backtrace info in debug messages
#         bit debug2: Include backtrace info in debug2 messages
#         bit debug3: Include backtrace info in debug3 messages.
#         bit debug4: Iclude backtrace info in debug4 messages.
#
# log-backtrace-level "error warn info debug debug2 debug3 debug4"
#
#### leaf log-backtrace-stream
#
# Indicates in which log stream(s) backtrace info
# will be included. Param string is an XSD list:
# a double quoted series of whitespace separated
# (log stream) strings like "logfile syslog
#
#     bit logfile: Include backtrace in logfile stream
#     bit stderr: Include backtrace in stderr stream.
#     bit stdout: Include backtrace in stdout stream.
#     bit syslog: Include backtrace in syslog stream.
#     bit vendor: Include backtrace in vendor stream.
#
# log-backtrace-stream "logfile stderr stdout syslog vendor"
#
#### leaf log-header
#
# Indicates what header elements to include in
# header output. Param string is an XSD list:
# a double quoted series of whitespace separated
# (element) strings like "custom localtime"
#
#  bit custom: Include date, time, and level
#  bit localtime: Include localtime instead of Yang canonical format.
#
# log-header "custom localtime"
#
#### leaf log-level
#  Sets the debug logging level for the program.
#    off
#    error
#    warn
#    info
#    debug
#    debug2
#    debug3
#    debug4
#
# log-level info
#
#### leaf log-mirroring
#  Duplicate log messages via STDOUT or log file when log-syslog
#  is configured
#
# log-mirroring (no default for this empty leaf)
#
#### leaf log-stderr
#  Output log-level error messages via STDERR rather than STDOUT
#
# log-stderr  (default not present, no STDERR)
#
#### leaf log-suppress-ctrl
# If present, strip certain control characters from
# output in order to modify log formatting.
#
# (default is not present, no log suppress control)
# log-suppress-ctrl
#
#### leaf log-syslog
#  Direct log messages to syslog instead of STDOUT or log filespec
#  (default is not present, no output to syslog)
#
# (no default for log-syslog)
#
#### leaf log-vendor
#
# If present, log messages will be directed to a
# customer-written and registered callback function.
# This functionality is defined by an API specified in
# the YumaWorks API Reference Manual. In the absence of
# a registered callback, this parameter will direct
# logging messages to syslog in order to facilitate
# standalone testing.";
#
# (no default for log-vendor)
#
#### leaf match-names
# Defines the search mode that should be used
# when resolving YANG node names in leafs and
# leaf-lists using the UrlPath data type.";
#
#  enum exact
#    The name must exactly match the node name
#    for all characters in both name strings.
#  enum exact-nocase
#    The name must match the node name
#    for all characters in both name strings.
#    Strings are not case-sensitive.
#  enum one
#    The name must exactly match the first N
#    characters of just one node name, which
#    must be the only partial name match found.";
#  enum one-nocase
#    The name must exactly match the first N
#    characters of just one node name, which
#    must be the only partial name match found.
#    Strings are not case-sensitive.
#  enum first
#    The name must exactly match the first N
#    characters of any node name. The first one
#    found will be used.
#  enum first-nocase
#    The name must exactly match the first N
#    characters of any node name. The first one
#    found will be used. Strings are not 
#    case-sensitive.
#
# match-names one-nocase
#
#### leaf message-indent
# The number of spaces to indent for each level of
# output in a protocol message, e.g. NETCONF request.
# The value zero means no indent, just line feeds.
# The value -1 means no indent and no line feeds either.
# (range: -1 .. 9)
#
# message-indent -1
#
#### leaf modpath
#  Internal file search path for YANG files.
#  e.g., modpath "~/modules:/some/path:../another/path"
#  Refer to user manual for complete module search path
#
# no default for modpath
#
#### leaf-list module
#  Specify a module that the server should load at boot-time
#  e.g., module test2
#        module test3
#
# no default for module
#
#### leaf ncport
#  Specify the TCP port to use when starting a NETCONF session
#  in auto-connect mode.
#
#  ncport 830
#
#### leaf password
#  password string to use for the auto-connect mode
# 
# no default for password
#
#### leaf private-key
#  Contains the file path specification
#  for the file containing the client-side private key.
#
# private-key $HOME/.ssh/id_rsa
#
#### leaf prompt-type
#  Selects the type of prompt string that will be used
#  in interactive mode.
#     brief
#     normal
#     full
#
# prompt-type normal
#
#### leaf protocols
#  Specifies which protocol versions the program or session
#  will attempt to use. Empty set is not allowed.
#
# protocols "netconf1.0 netconf1.1"
#
#### leaf public-key
#  Contains the file path specification
#  for the file containing the client-side public key.
#
# public-key $HOME/.ssh/id_rsa.pub
#
#### choice run-script or run-command or nothing
#  Selects the auto-startup mode
#
#   case leaf run-command [string]
#   The specified command will be invoked upon startup.
#   If the auto-connect parameters are provided, then
#   a session will be established before running the
#   command. length: 1 .. 4095
#
#   case  leaf run-script [string]
#   The specified script will be invoked upon startup.
#   If the auto-connect parameters are provided, then
#   a session will be established before running the
#   script.  If a quoted string is used, then any parameters
#   after the script name will be passed to the script.
#   length: 1 .. 4095
#
# no default for this optional choice
#
#### leaf runpath
#  Internal file search path for executable files.
#  e.g., runpath "~/tools:/usr/share/acmelibs"
#  Refer to user manual for complete module search path
#
# no default for runpath
#
#### leaf script-input
#  Specifies whether scripts run in interactive mode should
#  attempt to fill in missing command parameters from the
#  CLI command line or not.
#  If not, then script commands will be attempted with
#  whatever parameters are present in the script.
#
# script-input true
#
#### leaf server
# IP address or DNS name of the NETCONF server target.
#
# (no default for server)
#
#### leaf subdirs
#  If false, the file search paths for modules, scripts,
#  and data files will not include sub-directories if they
#  exist in the specified path.
#      
#  If true, then these file search paths will include
#  sub-directories, if present.  Any directory name beginning
#  with a dot '.' character, or named 'CVS', will be ignored.
#
# subdirs true
#
#### leaf test-suite-file
#  Specifies the yangcli-pro test suite config
#  file to use.
#
# test-suite-file ~/.yumapro/yangcli_pro_tests.conf
#
#### leaf time-rpcs
#  Measure the round-trip time of each <rpc> request and
#  <rpc-reply> at the session level.
#
# time-rpcs false
#
# leaf time-rpcs-stats
#  Save rpc statistics to the default statistics file
#  if the time-rpcs variable is also true.
#  The $$time-rpcs-stats system variable is derived
#  from this parameter.
#
# time-rpc-stats false
#
#### leaf time-rpcs-stats-file
#  The default filename to use for saving RPC timing statistics.
#  if the time-rpcs and time-rpc-stats variables are true.
#  The $$time-rpcs-stats-file system variable is derived
#  from this parameter.
#  length: 1 .. max
#
# time-rpc-stats-file ~/yangcli_pro_rpc_stats.txt
#
#### leaf timeout [Timeout]
#  Number of seconds to wait for a response
#  from the server before declaring a timeout.
#  Zero means no timeout at all.
#
# timeout 30
#
#### leaf transport
#  Identifies the default transport protocol that should be used.
#  enum values:
#    ssh:  NETCONF over SSH.
#    tcp:  NETCONF over TCP.
#     If this enum is selected, then the default --ncport
#     value is set to 2023, and the --protocols value
#     is set to netconf1.0.  The --password value will
#     be ignored.
#
# transport ssh
#
#### leaf use-xmlheader
#  Specifies which protocol versions the program or session
#  will attempt to use. Empty set is not allowed.
#
# use-xmlheader true
#
#### leaf user [NcxUserName]
#  User name to use for NETCONF sessions.
#  length: 1..63
#  pattern: [a-z,A-Z][a-z,A-Z,0-9,\-,_,\.]{0,62}
#
# there is no default for user
#
#### leaf uservars-file
# Specifies the yangcli user variables file to use.
#
# uservars-file ~/.yumapro/yangcli_uservars.xml
#
#
#### leaf warn-idlen
#  Controls whether identifier length warnings will be generated.
#  range 0 | 8 .. 1023;  0==disable ID length checking
#
# warn-idlen 64
#
#### leaf warn-linelen
#  Controls whether line length warnings will be generated.
#  range 0 | 40 .. 4095;  0==disable ID length checking
#
# warn-linelen 72
#
#### leaf-list warn-off
#  Controls whether the specified warning number will be generated
#  range 400 .. 899;
#  e.g., warn-off 477
#
# no default for warn-off
#
# leaf wildcard-keys
#   Set to 'true' if UrlPath targets for GET operations
#   are allowed to replace key values with the dash '-'
#   character to indicate that all instances of that key
#   are requested.
#      
#   Set to false to treat the '-' character as a plain
#   character if entered as a key value in a UrlPath string.
#
# wildcard-keys false
#
#### leaf yumapro-home
#  Directory for the yumapro project root
#  This will override the YUMAPRO_HOME environment variable
#  if it is set.
#
#  no default for yumapro-home

}